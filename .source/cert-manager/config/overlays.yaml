commonOverlays:
  - name: "add namespace markers"
    query:
      - metadata.namespace
      - subjects[*].namespace
      - "webhooks[*].clientConfig.service.namespace"
    value: "{{ .defaultNamespace }}"  # +operator-builder:field:name=namespace,default="{{ .defaultNamespace }}",type=string

  - name: "add labels"
    query:
      - metadata.labels
    action: merge
    value:
      capabilities.tbd.io/capability: certificates
      capabilities.tbd.io/version: "{{ .operatorVersion}}"
      capabilities.tbd.io/platform-version: "{{ .platformVersion }}"
      app.kubernetes.io/version: "{{ .projectVersion }}"
      app.kubernetes.io/part-of: platform
      app.kubernetes.io/managed-by: certificates-operator

  - name: "add labels to pods"
    query:
      - spec.template.metadata.labels
    action: merge
    onMissing:
      action: ignore
    value:
      capabilities.tbd.io/capability: certificates
      capabilities.tbd.io/version: "{{ .operatorVersion}}"
      capabilities.tbd.io/platform-version: "{{ .platformVersion }}"
      app.kubernetes.io/version: "{{ .projectVersion }}"
      app.kubernetes.io/part-of: platform
      app.kubernetes.io/managed-by: certificates-operator

  - name: "remove labels"
    query:
      - metadata.labels['platform.nukleros.io/category']
      - metadata.labels['platform.nukleros.io/project']
      - spec.template.metadata.labels['platform.nukleros.io/category']
      - spec.template.metadata.labels['platform.nukleros.io/project']
    action: delete 

  - name: "add node selector"
    documentQuery:
      - conditions:
        - query: $[?($.kind == "Deployment")]
    query:
      - spec.template.spec.nodeSelector
    value:
      tbd.io/node-type: platform

yamlFiles:
  - name: "cert-manager crds"
    path: "../vendor/crds.yaml"
    outputPath: "manifests/crds.yaml"

  - name: "cert-manager cainjector deployment"
    path: "../vendor/deployment.yaml"
    outputPath: "manifests/deployment.yaml"
    overlays:
      - name: "add cainjector replica count marker"
        query: "$[?($.metadata.name == 'cert-manager-cainjector')]"
        value:
          spec:
            # +operator-builder:field:name=injector.replicas,default="%v",type=int,description=`
            # Number of replicas to use for the cert-manager cainjector deployment.`
            replicas: !!int "%v"

      - name: "add cainjector image name markers"
        documentQuery:
          - conditions:
            - query: $[?($.metadata.name == "cert-manager-cainjector")]
        query: "spec.template.spec.containers[?(@.name == 'cert-manager-cainjector')]"
        value:
          # +operator-builder:field:name=injector.image,default="%v",type=string,description=`
          # Image to use for cert-manager CA injector deployment.`
          image: "%v"
          resources:
            requests:
              # +operator-builder:field:name=injector.resources.requests.cpu,default="%v",type=string,description=`
              # CPU requests to use for cert-manager CA injector deployment.`
              cpu: "%v"
              # +operator-builder:field:name=injector.resources.requests.memory,default="%v",type=string,description=`
              # Memory requests to use for cert-manager CA injector deployment.`
              memory: "%v"
            limits:
              # +operator-builder:field:name=injector.resources.limits.memory,default="%v",type=string,description=`
              # Memory limits to use for cert-manager CA injector deployment.`
              memory: "%v"

  - name: "cert-manager controller deployment"
    path: "../vendor/deployment.yaml"
    outputPath: "manifests/deployment.yaml"
    overlays:
      - name: "add controller replica count marker"
        query: "$[?($.metadata.name == 'cert-manager')]"
        value:
          spec:
            # +operator-builder:field:name=controller.replicas,default="%v",type=int,description=`
            # Number of replicas to use for the cert-manager controller deployment.`
            replicas: !!int "%v"

      - name: "add controller image name markers"
        documentQuery:
          - conditions:
            - query: $[?($.metadata.name == "cert-manager")]
        query: "spec.template.spec.containers[?(@.name == 'cert-manager-controller')]"
        value:
          # +operator-builder:field:name=controller.image,default="%v",type=string,description=`
          # Image to use for cert-manager controller deployment.`
          image: "%v"
          resources:
            requests:
              # +operator-builder:field:name=controller.resources.requests.cpu,default="%v",type=string,description=`
              # CPU requests to use for cert-manager controller deployment.`
              cpu: "%v"
              # +operator-builder:field:name=controller.resources.requests.memory,default="%v",type=string,description=`
              # Memory requests to use for cert-manager controller deployment.`
              memory: "%v"
            limits:
              # +operator-builder:field:name=controller.resources.limits.memory,default="%v",type=string,description=`
              # Memory limits to use for cert-manager controller deployment.`
              memory: "%v"

  - name: "cert-manager webhook deployment"
    path: "../vendor/deployment.yaml"
    outputPath: "manifests/deployment.yaml"
    overlays:
      - name: "add webhook replica count marker"
        query: "$[?($.metadata.name == 'cert-manager-webhook')]"
        value:
          spec:
            # +operator-builder:field:name=webhook.replicas,default="%v",type=int,description=`
            # Number of replicas to use for the cert-manager webhook deployment.`
            replicas: !!int "%v"

      - name: "add webhook image name markers and adjust readiness probe"
        documentQuery:
          - conditions:
            - query: $[?($.metadata.name == "cert-manager-webhook")]
        query: "spec.template.spec.containers[?(@.name == 'cert-manager-webhook')]"
        value:
          # +operator-builder:field:name=webhook.image,default="%v",type=string,description=`
          # Image to use for cert-manager webhook deployment.`
          image: "%v"
          resources:
            requests:
              # +operator-builder:field:name=webhook.resources.requests.cpu,default="%v",type=string,description=`
              # CPU requests to use for cert-manager webhook deployment.`
              cpu: "%v"
              # +operator-builder:field:name=webhook.resources.requests.memory,default="%v",type=string,description=`
              # Memory requests to use for cert-manager webhook deployment.`
              memory: "%v"
            limits:
              # +operator-builder:field:name=webhook.resources.limits.memory,default="%v",type=string,description=`
              # Memory limits to use for cert-manager webhook deployment.`
              memory: "%v"

  - name: "cert-manager rbac"
    path: "../vendor/rbac.yaml"
    outputPath: "manifests/rbac.yaml"
    overlays:
      - name: "add identity as an arbitrary marker"
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "cert-manager")]
              - query: $[?($.kind == "ServiceAccount")]
        query: metadata.name
        value:
          # +operator-builder:field:name=aws.roleARN,arbitrary,default="",type=string,description=`
          # The AWS IAM Role ARN to use for validating public DNS records for issuing public certificates.` 
          "%v"

  - name: "cert-manager service"
    path: "../vendor/service.yaml"
    outputPath: "manifests/service.yaml"

  - name: "cert-manager webhook"
    path: "../vendor/webhook.yaml"
    outputPath: "manifests/webhook.yaml"
    overlays:
      - name: "set namespace in CA reference annotation"
        query: "metadata.annotations"
        value:
          # +operator-builder:field:name=namespace,type=string,replace="certs-namespace"
          cert-manager.io/inject-ca-from-secret: certs-namespace/cert-manager-webhook-ca

  - name: "cert-manager cluster issuer"
    path: "../static/issuer-internal.yaml"
    outputPath: "manifests/issuer-internal.yaml"
